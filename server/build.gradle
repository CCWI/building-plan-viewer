plugins {
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'de.be.bpv'
version = '0.2.0'
sourceCompatibility = '15'

def frontendOutput = "${project(':client').projectDir}/dist"
def buildFrontend = !isAngularDevServerRunning()

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs = ["$frontendOutput", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    if (buildFrontend) {
        dependsOn ':client:buildFrontend'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // REST-API documentation
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.0'

    // In-memory database
    runtimeOnly 'com.h2database:h2'

    // HTML Parser
    implementation 'org.jsoup:jsoup:1.13.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    imageName = "building-plan-viewer:${version}"
}

static def isAngularDevServerRunning() {
    ServerSocket ss = null;
    DatagramSocket ds = null;
    try {
        ss = new ServerSocket(4200);
        ss.setReuseAddress(true);
        ds = new DatagramSocket(4200);
        ds.setReuseAddress(true);
        return false;
    } catch (IOException ignored) {
    } finally {
        if (ds != null) {
            ds.close();
        }
        if (ss != null) {
            try {
                ss.close();
            } catch (IOException ignored) {
            }
        }
    }

    return true;
}
